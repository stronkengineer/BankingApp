const accModel=require('../models/account');
const userModel=require('../models/user');
const passport = require('passport');

async function createUser(username, password, fullName) {
    try {
      const newUser = new userModel({ username, fullName });
      await userModel.register(newUser, password); 
      return newUser;
    } catch (error) {
      throw error;
    }
  }

  async function authenticateUser(req, res, next) {
    return passport.authenticate('local', (err, user) => {
      if (err) {
        return next(err);
      }
      if (!user) {
        return res.status(401).json({ message: 'Authentication failed' });
      }
      req.logIn(user, (loginErr) => {
        if (loginErr) {
          return next(loginErr);
        }
        return res.json({ message: 'Authentication successful', user });
      });
    })(req, res, next);
  }

async function createAccount(userId) {
  const newAccount = new Account({ user: userId });
  return await newAccount.save();
}

async function getUserById(userId)
{
    return await userModel.findById(userId);
}

async function updateUser(userId,updatedData)
{
    return await userModel.findByIdAndUpdate(userId,updatedData,{new:true});
}

async function deleteUser(userId)
{
    return await userModel.findByIdAndDelete(userId);
}

async function getAccountBalance(userId)
{
    const account=await accModel.findOne({user:userId});
    return account ? account.balance:0;
}

async function updateAccountBalance(userId,amount)
{
    await accModel.updateOne({user:userId},{$inc:{balance:amount}});
}
async function makeTransaction(senderId,recieverId,amount)
{
    try {
        const sender = await userModel.findById(senderId);
        const receiver = await userModel.findById(receiverId);
    
        if (!sender || !receiver) {
          throw new Error('Invalid sender/receiver');
        }
    
        const senderBalance = await accModel.getAccountBalance(senderId);
        const overdraftLimit = sender.overdraftLimit || 0;
    
        if (senderBalance + overdraftLimit < amount) {
          throw new Error('Insufficient funds (including overdraft)');
        }
    
        await updateAccountBalance(senderId, -amount);
        await updateAccountBalance(receiverId, amount);
    
        return 'Transaction successful';
      } catch (error) {
        throw error;
      }
    }

module.exports={createUser, getUserById, updateUser, deleteUser, makeTransaction,getAccountBalance, updateAccountBalance,authenticateUser, createAccount };
